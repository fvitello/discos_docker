#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import shutil
import argparse
import urllib2
import json
if os.name == 'posix' and sys.version_info[0] < 3:
    import subprocess32 as subprocess
else:
    import subprocess

repository = 'https://github.com/discos/discos.git'

STATION = ''
try:
    with open('/discos-sw/config/misc/station', 'r') as f:
        STATION = f.read().strip().split('=')[-1]
except IOError:
    pass

BRANCH_ROOT = os.environ['HOME']
stations = { s.lower(): s for s in ['SRT', 'Medicina', 'Noto']}

parser = argparse.ArgumentParser()
if not STATION:
    parser.add_argument(
        '-s',
        '--station',
        choices=stations.keys(),
        required=True
    )
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-b', '--branch')
group.add_argument('-t', '--tag')
args = parser.parse_args()


choices_type = ''
if args.branch:
    choices_type = 'branches'
    args.target = args.branch
elif args.tag:
    choices_type = 'tags'
    args.target = args.tag

request = urllib2.Request(
    'https://api.github.com/repos/discos/discos/%s' % choices_type,
)
choices = json.loads(urllib2.urlopen(request).read())
choices = [str(c.get('name')) for c in choices]

if args.target not in choices:
    msg = "ERROR: %s %s not found in remote repository!\nChoose between '%s'."
    if args.branch:
        msg = msg % ('branch', args.target, "', '".join(choices))
    elif args.tag:
        msg = msg % ('tag', args.target, "', '".join(choices))
    print(msg)
    sys.exit(1)


os.chdir(BRANCH_ROOT)
if not STATION:
    branch_name = '%s-%s' % (args.target, args.station)
else:
    branch_name = args.target
BRANCH_PATH = os.path.join(BRANCH_ROOT, branch_name)


# Clone the branch
try:
    code = subprocess.call(
        ['git',
        'clone',
        repository,
        branch_name,
        '--branch',
        args.target,
        '--single-branch'],
        timeout=120,
        )
except subprocess.TimeoutExpired:
    if os.path.exists(BRANCH_PATH):
        shutil.rmtree(BRANCH_PATH)
    print('\nERROR: timeout expired cloning %s.' % repository)
    sys.stderr.flush()
    sys.exit(-1)
if code:
    sys.exit(code)
else:
    os.symlink(
        '/discos-sw/SlaLibrary',
        '%s/Common/Libraries/SlaLibrary' % BRANCH_PATH
    )
    print('Repository cloned into %s' % BRANCH_PATH)


# Create the introot inside /discos-sw/introots/
introot = os.path.join('/discos-sw/introots', branch_name)
code = subprocess.call(
    ['getTemplateForDirectory', 'INTROOT', introot],
    stdout=open(os.devnull, 'w'))
if code:
    sys.exit(code)
else:
    os.makedirs(os.path.join(introot, 'user/bin'))
    subprocess.call(['chmod', '-R', 'go-rwx', introot])
    subprocess.call(['chmod', 'go+x', introot])
    subprocess.call(['chmod', '-R', 'go+rx', os.path.join(introot, 'lib')])
    subprocess.call(['chmod', '-R', 'g+rx', os.path.join(introot, 'bin')])
    subprocess.call(['chmod', '-R', 'o+rx', os.path.join(introot, 'user')])
    if not STATION:
        # Create the .station file
        with open(os.path.join(introot, '.station'), 'w') as f:
            f.write('export STATION=%s' % stations[args.station])
    print('Introot created into %s' % introot)


# Add the branch to the list of available branches
with open('/discos-sw/config/misc/branches', 'a+') as f:
    content = f.read()
    if not branch_name in content:
        f.write(branch_name + '\n')


# Set the active branch
if subprocess.call(['discos-set', branch_name]):
    sys.exit(code)
